// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models;

namespace WebAPI.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    [Migration("20191030114729_m2")]
    partial class m2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebAPI.Models.Apuesta", b =>
                {
                    b.Property<int>("ApuestaId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Apostado");

                    b.Property<float>("Cuota");

                    b.Property<int>("MercadoId");

                    b.Property<float>("TipoMercado");

                    b.Property<int>("UsuarioId");

                    b.Property<bool>("isOver");

                    b.HasKey("ApuestaId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Apuestas");

                    b.HasData(
                        new
                        {
                            ApuestaId = 1,
                            Apostado = 25.0,
                            Cuota = 1.9f,
                            MercadoId = 2,
                            TipoMercado = 2.5f,
                            UsuarioId = 1,
                            isOver = true
                        },
                        new
                        {
                            ApuestaId = 2,
                            Apostado = 50.0,
                            Cuota = 1.9f,
                            MercadoId = 1,
                            TipoMercado = 1.5f,
                            UsuarioId = 1,
                            isOver = false
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Cuenta", b =>
                {
                    b.Property<int>("CuentaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Banco");

                    b.Property<string>("Email");

                    b.Property<long>("NumeroTarjeta");

                    b.Property<double>("Saldo");

                    b.Property<int>("UsuarioId");

                    b.HasKey("CuentaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            CuentaId = 1,
                            Banco = "Bankia",
                            Email = "pepe@gmail.com",
                            NumeroTarjeta = 1234123412341234L,
                            Saldo = 2000.0,
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("GolesLocal");

                    b.Property<int>("GolesVisitante");

                    b.Property<string>("Local");

                    b.Property<string>("Visitante");

                    b.HasKey("EventoId");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            EventoId = 1,
                            Fecha = new DateTime(2019, 10, 30, 12, 47, 28, 274, DateTimeKind.Local).AddTicks(584),
                            GolesLocal = 0,
                            GolesVisitante = 0,
                            Local = "Alicante",
                            Visitante = "Sueca"
                        },
                        new
                        {
                            EventoId = 2,
                            Fecha = new DateTime(2019, 10, 30, 12, 47, 28, 277, DateTimeKind.Local).AddTicks(577),
                            GolesLocal = 0,
                            GolesVisitante = 0,
                            Local = "Cáceres",
                            Visitante = "Albaida"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Mercado", b =>
                {
                    b.Property<int>("MercadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("CuotaOver");

                    b.Property<float>("CuotaUnder");

                    b.Property<double>("DineroOver");

                    b.Property<double>("DineroUnder");

                    b.Property<int>("EventoId");

                    b.Property<float>("TipoMercado");

                    b.HasKey("MercadoId");

                    b.HasIndex("EventoId");

                    b.ToTable("Mercados");

                    b.HasData(
                        new
                        {
                            MercadoId = 1,
                            CuotaOver = 1.9f,
                            CuotaUnder = 1.9f,
                            DineroOver = 100.0,
                            DineroUnder = 100.0,
                            EventoId = 2,
                            TipoMercado = 1.5f
                        },
                        new
                        {
                            MercadoId = 2,
                            CuotaOver = 1.9f,
                            CuotaUnder = 1.9f,
                            DineroOver = 100.0,
                            DineroUnder = 100.0,
                            EventoId = 2,
                            TipoMercado = 2.5f
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Administrador");

                    b.Property<string>("Apellidos");

                    b.Property<int>("Edad");

                    b.Property<string>("Email");

                    b.Property<double>("Fondos");

                    b.Property<string>("Nombre");

                    b.Property<string>("Password");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            Administrador = false,
                            Apellidos = "Sanchez",
                            Edad = 29,
                            Email = "pepe@gmail.com",
                            Fondos = 0.0,
                            Nombre = "Pepe",
                            Password = "Abc123%"
                        },
                        new
                        {
                            UsuarioId = 2,
                            Administrador = true,
                            Apellidos = "Garcia",
                            Edad = 33,
                            Email = "anagarcia@gmail.com",
                            Fondos = 0.0,
                            Nombre = "Ana",
                            Password = "aBc123%"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Apuesta", b =>
                {
                    b.HasOne("WebAPI.Models.Mercado", "Mercado")
                        .WithMany("Apuestas")
                        .HasForeignKey("MercadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Models.Usuario", "Usuario")
                        .WithMany("Apuestas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Models.Cuenta", b =>
                {
                    b.HasOne("WebAPI.Models.Usuario", "Usuario")
                        .WithOne("Cuenta")
                        .HasForeignKey("WebAPI.Models.Cuenta", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Models.Mercado", b =>
                {
                    b.HasOne("WebAPI.Models.Evento", "Evento")
                        .WithMany("Mercados")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
